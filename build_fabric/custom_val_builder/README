Use to create the strucutre for the jinja template and device output data-model to use in the validate role

Can either run against device or a static dictionary file
ansible-playbook playbook.yml -i hosts --tag tmpl
ansible-playbook playbook.yml -i hosts --tag dev_val
ansible-playbook playbook.yml -i hosts --tag file_val

If using strict_mode it has to be at the level where you want to enforce it. For example to enforce that only these VNIs re present
  - show nve vni:
      _mode: strict
      "20110":
        type: L2 [110]
        state: Up


=========================================  Develop new validation test =========================================
The method for developing new validations is as follows:

=1. Add the cmd you want to validate to the var_template.j2 as an empty dictionary
cmds:
  - show nve peers:
      dummy: dummy

=2. In val_builder.py unhash the following under the device_dm method (should be no other lines under the method)
actual_state = json_output

=3. Unhash 'result actual_state' and run the script to get back cmd output which can now be used to create DM and validation file.
ansible-playbook playbook.yml -i hosts --tag dev_val

=4. Write up how your validation file should look in var_template.j2
  - show ip ospf neighbors detail:
      192.168.100.11:
        state: FULL
      192.168.100.12:
        state: FULL
      192.168.100.22:
        state: FULL

=5. In files/file_input.json add your expected actual_state and test with --tag file_val
{"192.168.100.11": {"state": "FULL"}, "192.168.100.12": {"state": "FULL"},"192.168.100.22": {"state": "FULL"}}

=6. From this now edit the method so that device output is formated into thei date model and test with --tag dev_val
        if list(desired_state.keys())[0] == "show ip ospf neighbors detail":
            for nhbr in json_output['TABLE_ctx']['ROW_ctx']['TABLE_nbr']['ROW_nbr']:
                actual_state[nhbr['rid']] = {'state': nhbr['state']}

=7. Create your template to create the desired state dynamically from the variable files.
  - show ip ospf neighbors detail:
{% if bse.device_name.spine in inventory_hostname %}
{% for x in groups[bse.device_name.leaf.split('-')[-1].lower()] + groups[bse.device_name.border.split('-')[-1].lower()] %}
      {{ hostvars[x].intf_lp[0].ip |ipaddr('address') }}:
        state: FULL
{% endfor %} {% else %}
{% for x in groups[bse.device_name.spine.split('-')[-1].lower()] %}
      {{ hostvars[x].intf_lp[0].ip |ipaddr('address') }}:
        state: FULL
{% endfor %}
{# MLAG peering for leaf and border got based on odd/even hostname and +/- 1 #}
{% if inventory_hostname[-2:]|int is odd %}
      {{ intf_lp[0].ip |ipaddr('address') | ipmath(+1) }}:
        state: FULL
{% else %}
      {{ intf_lp[0].ip |ipaddr('address') | ipmath(-1) }}:
        state: FULL
 {% endif %}

=8. Once happy that this works can move into 'roles/validate/filter_plugin/custom_validate.py' and 'roles/validate/templates/nxos/val_tmpl.j2'


=========================================  Errors =========================================

=The actual_state must always be a dict, if is a loop you will get the following error in ansible
'The error was: AttributeError: 'bool' object has no attribute 'get''

=A compliance report missing error measn that it is in the desired_state but not in the actual state.
This measn that 10010 is not in actual state. Be careful with string and integrars, this was caused becasue needed to be a string in desired state

{
    "show nve vni": {
        "complies": false,
        "present": {},
        "missing": [
            10010
        ],
        "extra": []
    },
    "skipped": [],
    "complies": false
}

=This ansoble message measn that probably missing : somewhere so is not a dict.
fatal: [DC1-N9K-LEAF01]: FAILED! => {"ansible_facts": {}, "ansible_included_var_files": [], "changed": false, "message": "Syntax Error while loading YAML.\n  mapping values are not allowed here\n\nThe error appears to be in '/home/ste/mac_hd/Ansible/playbooks_and_cmds/ip_auto_lab/build_fabric/custom_val_builder/files/desired_state.yml': line 7, column 13, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n      10010\n        type: L2 [10]\n            ^ here\n"}

  - show nve vni:
      10010                     <<<<<< needs :
        type: L2 [10]
        vni-state: Up

=Strict has to be at the level where you want to enforce it. If an extra element is deinfed will get an 'extra' error in the complaince report
ok: [DC1-N9K-BORDER01] => {
    "result": {
        "complies": false,
        "show nve vni": {
            "complies": false,
            "extra": [
                "90999"                             <<< VNI on the device but not in desired_state


=========================================  Some examples =========================================

=desired_state in val_tmpl.j2
  - show ip ospf neighbors detail:
      192.168.100.11:
        state: FULL
      192.168.100.12:
        state: FULL
      192.168.100.22:
        state: FULL

=actual_state in file_input.json
{"192.168.100.11": {"state": "FULL"}, "192.168.100.12": {"state": "FULL"},"192.168.100.22": {"state": "FULL"}}

or
{
        "192.168.100.11": {
            "state": "FULL"
        },
        "192.168.100.12": {
            "state": "FULL"
        },
        "192.168.100.22": {
            "state": "FULL"
        }
}

=desired_state in val_tmpl.j2
  - show ip int brief vrf all:
      BLU:
        Vlan10:
          proto-state: up
          link-state: up
          admin-state: up
          prefix: 10.10.10.1

      RED:
        Vlan20:
          proto-state: up
          link-state: up
          admin-state: up
          prefix: 10.10.20.1

=actual_state in file_input.json
{"BLU": {"Vlan10": {"proto-state": "up", "link-state": "up", "admin-state": "up", "prefix": "10.10.10.1"}}, "RED": {"Vlan20": {"proto-state": "up", "link-state": "up", "admin-state": "up", "prefix": "10.10.20.1"}}}

or
{
        "BLU": {
            "Vlan10": {
                "admin-state": "up",
                "link-state": "up",
                "prefix": "10.10.10.1",
                "proto-state": "up"
            }
        },
        "RED": {
            "Vlan20": {
                "admin-state": "up",
                "link-state": "up",
                "prefix": "10.10.20.1",
                "proto-state": "up"
            }
        }
}