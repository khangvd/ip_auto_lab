---
 ################################# TESTING templates, vars, and napalm getters   #################################

- name: "Test templates and vars"
  # hosts: all
  hosts: DC1-N9K-BORDER01
  connection: local
  vars_files:
    - vars/ansible.yml
#     - vars/base.yml
#     - vars/fabric.yml
  tasks:
#   - name: "SYS >> Create config snippets"
#     template:
#       # src: roles/validate/templates/nxos/fbc_validate.j2
#       # dest: "{{ ans.dir_path }}/{{ inventory_hostname }}/nxos_val.yml"
#       src: roles/validate/templates/fbc_validate.j2
#       dest: "{{ ans.dir_path }}/{{ inventory_hostname }}/napalm_val.yml"
#     tags: tmp

  # - block:
  #   - name: "NET >> Checking BGP Peerings"
  #     napalm_get_facts:
  #       provider: "{{ ans.creds_all }}"
  #       dev_os: "{{ ansible_network_os }}"
  #       filter: bgp_neighbors
  #     register: output
  #   - debug:
  #       msg: "{{ output }}"
  #   tags: nap

  - name: "SYS >> Print to screen"
    debug:
      # msg: "{{ fbc.adv.lp.rtr.keys() |list }}"
      # msg: "{{ intf_lp.fbc.adv.lp.rtr.key() | list }}"
      # msg: "{{ intf_lp.loopback0.keys() | list | ipaddr('address') }}"
      # msg:  "{% if '192.168.100.16' | ipaddr == True %}  HELLO {% endif %}"
      msg: "{% if 'None' | ipaddr != False %} HELLO {% endif %}"
      # "{{ '192.168.100.16/32' | ipaddr('address') }}"
    tags: prt

 ################################# Test pre_validation  #################################

# - name: "Deploy Leaf and Spine DC"
#   # hosts: all
#   hosts: DC1-N9K-BORDER01
#   connection: local
#   vars_files:
#     - vars/ansible.yml            # All varaibles start with ans.
#     - vars/services_tenant.yml               # All varaibles start with bse.

# ######################## 1. Validates the input data (in var_files) and creates the file strucuture ########################
#   tasks:
#     # 1a. Validate that the required elements in the variable files are all defined and in the correct format
#     - name: "Validate the contents of the variable files"
#       block:
#       # - name: "SYS >> Validating the contents of base.yml"
#         # assert:
#         #   # Uses a filter pluggin (validate_base) to do the validating and returns the outcome to the Anisble assert module
#         #   that: "{{ bse.device_name | input_bse_validate(bse.addr, bse.users) }} == 'base.yml unittest pass'"
#         #   quiet: yes
#         #   fail_msg: "{{ bse.device_name | input_bse_validate(bse.addr, bse.users) }}"
#       - set_fact:
#           test: "{{ svc_tnt.tnt | input_svc_tnt_validate(svc_tnt.adv) }}"
#       - debug: var=test




 ################################# services   #################################

# - name: "TST services"
#   hosts: DC1-N9K-BORDER01:DC1-N9K-LEAF01:DC1-N9K-SPINE01
#   # hosts: DC1-N9K-BORDER01
#   connection: local
#   vars_files:
#     - vars/ansible.yml
#     - vars/base.yml
#     - vars/fabric.yml
#     - vars/services_tenant.yml
#   tasks:
#   # - block:
#   - name: "SYS >> Use Python to create complete data-model"
#     set_fact:
#       flt_svc_tnt: "{{ svc_tnt.tnt |create_svc_tnt_dm(svc_tnt.adv.bse_vni) }}"   # Completes data-model with VNI
#       # srv_ports_dm: "{{ srv_ports |srv_ports_dm(srv_ports_adv, srv_tenants) }}"      # Completes data-model with interface & PO/VPC
#     changed_when: false
#     run_once: true
#   - name: "SYS >> Generating fabric config snippets"
#     template:
#       src: "svc_tnt_template.j2"
#       dest: "{{ ans.dir_path }}/{{ inventory_hostname }}/config/tnt_svc.conf"
#     changed_when: False           # Stops it reporting changes in playbook summary
#     check_mode: False             # These tasks still make changes when in check mode
#     when: bse.device_name.spine not in inventory_hostname


  # - debug:
  #     var: flt_svc_tnt

    # tags: services



 ################################# TESTING napalm VALDIATION    #################################
# - name: "test NAPALM validate"
#   hosts: all
#   connection: local
#   vars_files:
#     - vars/ansible.yml

#   tasks:
#     - name: Use Napalm validate LLDP
#       napalm_validate:
#         provider: "{{ ans.creds_all }}"
#         dev_os: "{{ ansible_network_os }}"
#         validation_file: /home/ste/device_configs/{{ inventory_hostname }}/napalm_val.yml
#       register: nap_val
#       ignore_errors: yes

#     - name: Display full compliance report
#       debug:
#         var: nap_val.compliance_report

#     - name: Compliance check failed
#       fail:
#         msg: "Non-compliant state encountered. Refer to the full report."
#       when: not nap_val.compliance_report.complies



 ################################# TESTING non-napalm VALDIATION    #################################

# - name: "SYS >> test non naplam validate"
#   # hosts: localhost
#   hosts: DC1-N9K-LEAF01
#   connection: local
#   vars_files:
#     - vars/ansible.yml
#     - vars/base.yml
#     - vars/fabric.yml
#     - vars/fbc_validate.yml
#   tasks:
#   - block:
#     - name: "NET >> Get output"
#       napalm_cli:
#         provider: "{{ ans.creds_all }}"
#         dev_os: "{{ ansible_network_os }}"
#         args:
#           commands:
#             - "{{ item.keys() | list | first }}"
#       register: output
#       loop: "{{ cmds }}"
#       loop_control:
#         label: "{{ item.keys() | list | first }}"

#     - name: SYS >> Read in parse_genie role
#       include_role:
#         name: clay584.parse_genie
# ### OPT1
#     - name: SYS >> Parse BGP
#       set_fact:
#         genie_ospf: "{{ output.results[0].cli_results.values()  | list | first | parse_genie(command='show ip ospf neighbors detail', os='nxos') }}"
#         genie_lag: "{{ output.results[1].cli_results.values() | list | first | parse_genie(command='show port-channel summary', os='nxos') }}"
#         genie_mlag: "{{ output.results[2].cli_results.values() | list | first | parse_genie(command='show vpc', os='nxos') }}"
### OPT1
    # - name: SYS >> Parse BGP
    #   set_fact:
    #     genie_ospf: "{{ item.cli_results.values() | list | first | parse_genie(command=item.cli_results.keys() | list | first, os='nxos') }}"
    #     # genie_lag: "{{ item.cli_results.values() | list | first | parse_genie(command='show port-channel summary', os='nxos') }}"
    #     # genie_mlag: "{{ item.cli_results.values() | list | first | parse_genie(command='show vpc', os='nxos') }}"
    #   loop: "{{ output.results }}"
    #   loop_control:
    #     label: "{{ item.cli_results.keys() | list | first }}"

    # - debug:
    #     var: genie_ospf
    # - debug:
    #     var: genie_lag
    # - debug:
    #     var: genie_mlag




   ################################# TESTING ASSERT    #################################
  # - name: "SYS >> Validating the contents of base.yml"
  #   assert:
  #     that: "{{ bse.device_name | validate_base(bse.addr, bse.users) }} == 'base.yml unittest pass'"
  #     success_msg: "base.yml contents unittest passed"
  #     fail_msg: "{{ bse.device_name | validate_base(bse.addr, bse.users) }}"

  # - name: "SYS >> Validating the contents of fabric.yml"
  #   assert:
  #     that: "{{ fbc.network_size | validate_fabric(fbc.route, fbc.acast_gw_mac, fbc.adv.bse_intf, fbc.adv.lp, fbc.adv.mlag, fbc.adv.addr_incre) }} == 'fabric.yml unittest pass'"
  #     success_msg: "fabric.yml contents unittest passed"
  #     fail_msg: "{{ fbc.network_size | validate_fabric(fbc.route, fbc.acast_gw_mac, fbc.adv.bse_intf, fbc.adv.lp, fbc.adv.mlag, fbc.adv.addr_incre) }}"
  #   run_once: true
    # set_fact:     # Passes output through filter with bgp_neigh variable
    #   bgp_table: "{{ bgp_output.ansible_facts | bgp_filter(inventory_hostname, bgp_neigh) }}"