{##### From the input variables generates a validation file (expected state) used by custom_validate to validate actual state #####}
{####### Validates the tenant information, so the configuration as applied from services_interface.yml by the svc_intf role ######}
{########## Block statements inherit info from svc_intf_val_tmpl.j2 template and pass it to bse_fbc_val_tmpl  #########}

{#### Logic to decide which set of variables in flt_svc_tnt to render dependant on device-role ####}
{% if bse.device_name.leaf in inventory_hostname %}
{% set flt_vars = flt_svc_tnt[0] %}{% set stp_fwd_vlans = flt_svc_tnt[2] %}
{% elif bse.device_name.border in inventory_hostname %}
{% set flt_vars = flt_svc_tnt[1] %}{% set stp_fwd_vlans = flt_svc_tnt[3] %}
{% endif %}


{# Adds the results of this rendered file into the bse_fbc_val_tmpl file #}
{% extends ansible_network_os + "/bse_fbc_val_tmpl.j2" %}





{### show port-channel summary ###}
{% block show_port_channel_summary %}
{% endblock %}


{### show vpc ###}
{% block show_vpc %}
      peer-link_vlans: {{ stp_fwd_vlans }}
{% endblock %}


{### show interfaces_trunk ###}
{% block show_int_trunk %}
        stpfwd_vlans: {{ stp_fwd_vlans }}
{% endblock %}


{### show ip int brief include-secondary vrf all ###}
{% block show_ip_int_brief %}{% if bse.device_name.spine not in inventory_hostname %}
{% for flt_tnt in flt_vars %}{% if flt_tnt.l3_tnt is sameas true %}
{% for vl in flt_tnt.vlans %}
{% if vl.ip_addr == 'l3_vni' or vl.ip_addr |ipaddr('address') != False %}
      Vlan{{ vl.num }}:
{% if vl.ip_addr != 'l3_vni' %}
        prefix: {{ vl.ip_addr |ipaddr('address') }}
{% endif %}
        tenant: {{ flt_tnt.tnt_name }}
        proto-state: up
        link-state: up
        admin-state: up
{% endif %}{% endfor %}{% endif %}{% endfor %}
{% endif %}{% endblock %}


{### show nve peers ###}
{% block show_nve_peers %}{% if bse.device_name.spine not in inventory_hostname %}
  - show nve peers:
{% for host in groups[bse.device_name.leaf.split('-')[-1].lower()] + groups[bse.device_name.border.split('-')[-1].lower()] %}
{# Gets VTEP loopbacks for all devices except own #}
{% if host != inventory_hostname %}
      {{ hostvars[host].intf_lp[1].ip |ipaddr('address') }}:
        peer-state: Up
{# Secondary IP is shared so only need off one in VPC pair (odd numbered device), also not this devices pair #}
{% if host[-2:]|int is odd %}{% if hostvars[host].intf_lp[1].mlag_lp_addr != hostvars[inventory_hostname].intf_lp[1].mlag_lp_addr %}
      {{ hostvars[host].intf_lp[1].mlag_lp_addr |ipaddr('address') }}:
        peer-state: Up
{% endif %}{% endif %}
{% endif %}{% endfor %}
{% endif %}{% endblock %}


{# ## show nve vni ###}
{% block show_nve_vni %}{% if bse.device_name.spine not in inventory_hostname %}
  - show nve vni:
      _mode: strict
{% for flt_tnt in flt_vars %}{% for vl in flt_tnt.vlans %}
{% if vl.ip_addr != 'l3_vni' %}
      "{{ vl.vni }}":
        type: L2 [{{ vl.num }}]
        state: Up
{% endif %}{% if flt_tnt.l3_tnt is sameas true and vl.ip_addr == 'l3_vni' %}
      "{{ vl.vni }}":
        type: L3 [{{ flt_tnt.tnt_name }}]
        state: Up
{% endif %}{% endfor %}{% endfor %}
{% endif %}{% endblock %}


{### show interface status ###}
{% block show_int_status%}
{% endblock %}
