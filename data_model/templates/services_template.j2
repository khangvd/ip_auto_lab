{# Need to workout how to create this cmd dynamically #}
vlan 1-2,10-12,20,50-51,901

{#### Create VLANs, VRFs, and SVIs ####}
#################### VLANs ####################
{% for tn in tenants_dm %}
{% for vl in tn.vlans %}
{# Create only L2VNI VLANs with a L3 tenant on border Switches #}
{% if device_name.border_name in inventory_hostname and tn.l3_tenant is sameas false %}
vlan {{ vl.num }}
  name {{ vl.name }}
  vn-segment {{ vl.l2vni }}
{# Create all the L2VNI VLANs on Leaf Switches #}
{% elif device_name.leaf_name in inventory_hostname %}
vlan {{ vl.num }}
  name {{ vl.name }}
  vn-segment {{ vl.l2vni }}
{% endif %}
{% endfor %}
{% endfor %}
{# Create all the L3VNI VLANs on leaf and border #}
{% for tn in tenants_dm %}
{% if tn.l3_tenant is sameas true %}
vlan {{ tn.tn_vlan }}
  name {{ tn.tenant_name }}
  vn-segment {{ tn.l3vni }}
{% endif %}
{% endfor %}
!
{# Create all the tenants (VRFs) on leaf and border #}
#################### VRF & SVIs ####################
{% for tn in tenants_dm %}
{% if tn.l3_tenant is sameas true %}
vrf context {{ tn.tenant_name }}
  vni {{ tn.l3vni }}
  rd auto
  address-family ipv4 unicast
    route-target both auto
    route-target both auto evpn
{% endif %}
{% endfor %}
!
{% for tn in tenants_dm %}
{% for vl in tn.vlans %}
{# Create all the SVIs (for L2VNIs) on the leaf switches #}
{% if device_name.leaf_name in inventory_hostname and tn.l3_tenant is sameas true %}
{% if vl.ip_addr != 'none' %}
interface vlan{{ vl.num }}
  no shutdown
  vrf member {{ tn.tenant_name }}
  no ip redirects
{# Add a tag if the SVI is to be redistributed into IPv4 addr family #}
{% if vl.ipv4_bgp_redist == 'yes' %}
  ip address {{ vl.ip_addr }} tag {{ bgp_options.ipv4_redist_tag |default(tn.l3vni)}}
{% else %}
  ip address {{ vl.ip_addr }}
{% endif %}
  no ipv6 redirects
  fabric forwarding mode anycast-gateway
{% endif %}
{% endif %}
{% endfor %}
{% endfor %}
!
{# Create all the SVIs (for L3VNIs) on leaf and spine switches#}
{% for tn in tenants_dm %}
{% if tn.l3_tenant is sameas true %}
interface Vlan{{ tn.tn_vlan }}
  no shutdown
  vrf member {{ tn.tenant_name }}
  no ip redirects
  ip forward
  no ipv6 redirects
{% endif %}
{% endfor %}

{#### Create VXLAN and BGP config ####}
#################### VXLAN ####################
interface nve1
{# Associate the L3VNIs to NVE on leaf and border switches#}
{% for tn in tenants_dm %}
{% if tn.l3_tenant is sameas true %}
  member vni {{ tn.l3vni }} associate-vrf
{% endif %}
{% endfor %}
{# Associate the L2VNIs with no SVI on border switches #}
{% for tn in tenants_dm %}
{% for vl in tn.vlans %}
{% if device_name.border_name in inventory_hostname and tn.l3_tenant is sameas false %}
  member vni {{ vl.l2vni }}
    suppress-arp
    ingress-replication protocol bgp
{# Associate all L2VNIs on leaf switches #}
{% elif device_name.leaf_name in inventory_hostname %}
  member vni {{ vl.l2vni }}
    suppress-arp
    ingress-replication protocol bgp
{% endif %}
{% endfor %}
{% endfor %}


#################### BGP ####################
{% for tn in tenants_dm %}
{# Only create the route-map on the leaf switches #}
{% if device_name.leaf_name in inventory_hostname and tn.l3_tenant is sameas true %}
route-map CONN_{{ tn.tenant_name }}>>BGP permit 10
  match tag {{ bgp_options.ipv4_redist_tag |default(tn.l3vni)}}
{% endif %}
{% endfor %}
!
router bgp 65001
{% for tn in tenants_dm %}
{% if tn.l3_tenant is sameas true %}
  vrf {{ tn.tenant_name }}
    address-family ipv4 unicast
      advertise l2vpn evpn
{# Only associate the route-map on the leaf switches #}
{% if device_name.leaf_name in inventory_hostname %}
      redistribute direct route-map CONN_{{ tn.tenant_name }}>>BGP
{% endif %}
{% endif %}
{% endfor %}

#################### EVPN ####################
evpn
{% for tn in tenants_dm %}
{% for vl in tn.vlans %}
{# Associate the L2VNIs with no SVI on border switches #}
{% if device_name.border_name in inventory_hostname and tn.l3_tenant is sameas false %}
  vni {{ vl.l2vni }} l2
    rd auto
    route-target import auto
    route-target export auto
{# Associate all L2VNIs on leaf switches #}
{% elif device_name.leaf_name in inventory_hostname %}
  vni {{ vl.l2vni }} l2
    rd auto
    route-target import auto
    route-target export auto
{% endif %}
{% endfor %}
{% endfor %}

#################### Single-Homed Interfaces ####################
{### Create the single homed interfaces ###}
{% for port in ports_dm.sh_ports %}
{% if port.switch == inventory_hostname %}
interface {{ port.interface }}
  description Access > {{ port.description }}
{# Create the single homed access port #}
{% if port.port_type == 'access' %}
  switchport mode access
  switchport access vlan {{ port.port_variable }}
{# Create the single homed trunk port #}
{% elif port.port_type == 'trunk' %}
  switchport mode trunk
  switchport trunk allowed vlan {{ port.port_variable }}
{# Create the single homed layer3 port #}
{% elif port.port_type == 'layer3' %}
  no switchport
  vrf member {{ port.vrf }}
  ip address {{ port.port_variable }}
{% endif %}
  no shutdown
!
{% endif %}
{% endfor %}
#################### Port-channels ####################
{### Create the dual homed port-channels ###}
{% for port in ports_dm.dh_ports %}
{# Formula adds 1 to current switch to so created on both switches in VPC pair #}
{% if (port.switch == inventory_hostname) or (port.switch[:-2] + "%02d" |format(port.switch[-2:] |int+1) == inventory_hostname) %}
interface port-channel {{ port.po}}
  description PC > {{ port.description }}
{# Create the dual homed access port #}
{% if port.port_type == 'access' %}
  switchport mode access
  switchport access vlan {{ port.port_variable }}
{# Create the dual homed trunk port #}
{% elif port.port_type == 'trunk' %}
  switchport mode trunk
  switchport trunk allowed vlan {{ port.port_variable }}
{# Create the dual homed layer3 port #}
{% elif port.port_type == 'layer3' %}
  no switchport
  vrf member {{ port.vrf }}
  ip address {{ port.port_variable }}
{% endif %}
  vpc {{ port.vpc }}
  no shutdown
!
{% endif %}
{% endfor %}
#################### Dual-Homed Interfaces ####################
{### Create the dual homed interfaces ###}
{% for port in ports_dm.dh_ports %}
{# Formula adds 1 to current switch to so created on both switches in VPC pair #}
{% if (port.switch == inventory_hostname) or (port.switch[:-2] + "%02d" |format(port.switch[-2:] |int+1) == inventory_hostname) %}
interface {{ port.interface }}
  description Access > {{ port.description }}
{# Create the dual homed access port #}
{% if port.port_type == 'access' %}
  switchport mode access
  switchport access vlan {{ port.port_variable }}
{# Create the dual homed trunk port #}
{% elif port.port_type == 'trunk' %}
  switchport mode trunk
  switchport trunk allowed vlan {{ port.port_variable }}
{# Create the dual homed layer3 port #}
{% elif port.port_type == 'layer3' %}
  no switchport
  vrf member {{ port.vrf }}
  ip address {{ port.port_variable }}
{% endif %}
  channel-group {{ port.po }} mode {{ port.po_mode }}
  no shutdown
!
{% endif %}
{% endfor %}