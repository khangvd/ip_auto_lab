---
################ Services Delivered by the Fabric on leaf and border switches ################

###################### Service: Tenant ######################
# By default just creates the L2 VLAN. Add the "ip_addr" dictionary to also create an SVI (must be in a L3 tenant)
# By default SVI not redistributed into the IPv4 BGP address-family. Add "ipv4_bgp_redist" to redistribute
# If the tenant is not a L3 tenant will assume that the gateway for VLANs is on border so create VLANs & L2 VNI on border also

#### Base variables ####
tenants:
  - tenant_name: prod                 # Name of the VRF
    l3_tenant: yes                    # Does it need SVIs or is routing done on a device external to the L&S fabric (i.e router)
    vlans:                            # VLANs within this tenant
      - num: 10
        name: data
        ip_addr: 10.10.10.1/24       # Adding an IP also creates an SVI, whereas none means no SVI is created
        ipv4_bgp_redist: no          # To redistributes the SVI into IPv4 BGP address-family
      - num: 11
        name: servers
        ip_addr: 10.10.11.1/24
        ipv4_bgp_redist: yes
      - num: 12
        name: dev
        ip_addr: 10.10.12.1/24
        ipv4_bgp_redist: no
      - num: 20
        name: lb_vips
        ip_addr: 10.10.20.1/24
        ipv4_bgp_redist: no
      - num: 30
        name: ha_keepalive
        ip_addr: none               # No SVI is created
        ipv4_bgp_redist: no
  - tenant_name: acme
    l3_tenant: yes
    vlans:
      - num: 66
        name: acme_prod
        ip_addr: 10.66.66.1/24
        ipv4_bgp_redist: no
  - tenant_name: dmz
    l3_tenant: no
    vlans:
      - num: 50
        name: dmz-web
      - num: 51
        name: dmz-mail

#### Advanced variables ####
# Each L3 Tenant requires a VLAN and VNI. These are automatically generated by incrementing the L3VNI base_vlan and base_vni
# Each tenant vlan requires a VNI. These are formed of an increment of 10000 per-tenant with each VLAN number added to this
# When an SVIs is redistributed into IPv4 BGP the tag is the L2VNI number unless overidden by giving ipv4_redist_tag a value
# The route-map name incorporates the tenant name by swapping VRF for this.

base_vni:
  tn_vlan: 3001         # Transit L3VNI start VLAN number. Incre by 1 for each L3 tenant (VRF)
  l3vni: 3001           # Transit L3VNI start VNI number. Incre by 1 for each L3 tenant (VRF)
  l2vni: 10000          # L2VNI range to add to each tenants vlan. Increments by 10000 for each tenant

bgp_options:
  ipv4_redist_rm_name: rm_CONN_VRF>>BGP     # Can change route-map name, but it MUST still include VRF in the text
  # ipv4_redist_tag:                        # Unhash and add a value to overide the default which is the L3VNI number

###################### Service: Device Ports ######################
# Single-homed are only created on the switch specified whereas dual-homed are created on that switch and its pair VPC switch
# When specifying dual-homed ports must specify the odd number switch, template will automatically add config on its VPC neighbor switch
# Cant choose interface to use as would make difficult to get config in correct order. However you can change the defaults to assign the range of ports used

#### Base variables ####
ports:
    single_homed:                         # For devices only attached to one switch
      - description: DC1-SRV-APP01        # Used on interface description
        port_type: access                 # Can be access, trunk or layer3
        port_variable: 12                 # If access the acccess vlan, if trunk the allowed vlans seperated by a comma, if layer3 the IP
        switch: DC1-N9K-LEAF01            # Name switch to add the port on to
      - description: DC1-SRV-PRD01
        port_type: trunk
        port_variable: 10, 12
        switch: DC1-N9K-LEAF02
      - description: DC1-SRV-RTR01
        port_type: layer3
        port_variable: 10.10.11.10/24
        switch: DC1-N9K-BORDER01
      - description: DC1-SRV-RTR02
        port_type: layer3
        port_variable: 10.66.66.1/24
        switch: DC1-N9K-BORDER02
    dual_homed:                           # For devices only attached to one switch
      - description: DC1-ESX-HST01
        po_mode: active
        port_type: trunk
        port_variable: 10, 11, 12
        switch: DC1-N9K-LEAF01            # Just add the name of the odd numbered switch in the VPC pair, template works out the pairs name
      - description: DC1-LTM-LB01
        po_mode: active
        port_type: access
        port_variable: 20
        switch: DC1-N9K-LEAF01
      - description: DC1-VIOS-SW1
        po_mode: active
        port_type: trunk
        port_variable: 50, 51
        switch: DC1-N9K-LEAF01

#### Advanced variables ####
# Set the Interface ranges and PO/VPC ranges to be used

default_int:                    # Reserved interface range that server ports can be automatically assigned from (applies to all leaf and border switches)
  dual_homed:                   # Used only for dual-homed devices
    first_int: Ethernet1/21     # First interface
    last_int: Ethernet1/50      # Last interface
    po: 21                      # First PortChannel used
    vpc: 21                     # First VPC used
  single_homed:                 # Used only for single-homed devices
    first_int: Ethernet1/51     # First interface
    last_int: Ethernet1/60      # Last interface


###################### Service: Routing Protocols (border only) ######################
# This supports creation of BGP peerings or non-backbone OSPF process only on the border switches
# All BGP updates allowed in/out is done using Route-maps and prefix-lists
# Are 3 pre-built prefix-lists that can be referenced in OSPF or BGP: ALLOW-ALL, DENY-ALL, DEFAULT
# The OSPF process will be built on a VPC pair of borders, with a loopback created for RID and VLAN for the peering between them
# If using 4 borders a differnet area number will be used for each
# This only creates the process, assigning interfaces to it is done with t

###################### Service: OSPF Neighbors (Non-backbone process) ######################
# This is only for non-backbone OSPF neighbors off the border, so for example to router or firewall
# For routes to go any further that the border router needs redistribution in/out of BGP
# new loopback is created to be used as the OPSF RID
# The OSPF process is created on all border switches
# Assumed that OSPF devices connected on same interface on all devices
# Just creates OSPF, doesnt assign interfaces to it (excpet for lp and inter-vpc vlan) is done with Service: Device Ports

#### Base variables ####
srv_bgp_settings:
  inet_peerings:                                  # ISP peerings which only accept a default-route in
    - name: GTT                                   # Short name used in route-maps
      remote_as: 65002
      peer_ip: 192.168.100.11
      description: GTT Internet Peering
      allowed_out: [185.4.167.0/24, 215.43.16.0/24]
      #timers: [3, 9]
  ebgp_peerings:                                  # EBGP peerings which can accept and advertise anything
    - name: MS                                    # Short name used in route-maps and peer template
      remote_as: 65002
      peer_ip: 192.168.12.5
      description: Microsoft Azure Peering
      allowed_in: [ALLOW-ANY]                     # The network/prefix (seperated by ,) received. Blank will allow all
      allowed_out: [DENY-ALL]                     # The network/prefix (seperated by ,) advertised. Blank will allow all
      #timers: [3, 9]                             # Uses the default of 3 and 9 unless unhased and specified

srv_ospf_setting:
  - pro: 98
    vrf: prod
    area: 0.0.0.1                                 # First area, so BORDER1/2 will be 0.0.0.1 and BORDER3/4 0.0.0.2
    inter_sw_vlan: 3                              # VLAN used for OSPF peering between border leafs
    default_orig: no                              # Use 'yes' to advertise default route if exists or 'always' to advertise it even if it doesnt exist
    bgp_redist_in: yes                            # Redistriubtes based on the tenant RT, these are the SVIs redist into BGP with a tag
    bgp_redist_out: [ALLOW-ANY]                   # The network/prefix (seperated by ,) redist into this tenant (into BGP).

#### Advanced variables ####
srv_bgp_default:
  rm_in_naming: rm_name_IN                        # Naming format, name is swapped with bgp peering name. Can change but MUST still have 'name' in it
  rm_out_naming: rm_name_OUT                      # Naming format, name is swapped with bgp peering name. Can change but MUST still have 'name' in it
  pl_in_naming: pl_name_IN                        # Only created if dont use ALLOW-ALL, DENY-ALL or DEFAULT
  pl_out_naming: pl_name_OUT                      # Only created if dont use ALLOW-ALL, DENY-ALL or DEFAULT

srv_ospf_default:
  rm_in_naming: rm_BGPas>>OSPFpro              # Naming format, 'pro' is swapped for OSPF process and 'num' for the BGP AS. Can change but MUST still have 'pro' and 'as' in it
  rm_out_naming: rm_OSPFpro>>BGPas             # Naming format, 'pro' is swapped for OSPF process and 'num' for the BGP AS. Can change but MUST still have 'pro' and 'as' in it
  cl_in_naming: cl_RT_vrf                         # Extcommity list that matches the tag assigned to SVIs redist into IPv4 address family. 'vrf is subsituted for vrf
  pl_out_naming: pl_OSPFpro>>BGPas             # Only created if dont use ALLOW-ALL, DENY-ALL or DEFAULT